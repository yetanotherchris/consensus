using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using OpenAI.Chat;
using Spectre.Console;

namespace ConsensusApp;

internal sealed class ConsensusProcessor
{
    private readonly OpenRouterClient _client;

    public ConsensusProcessor(OpenRouterClient client)
    {
        _client = client;
    }

    public async Task<ConsensusResult> RunAsync(string prompt, IReadOnlyList<string> models)
    {
        string answer = prompt;
        string previousModel = string.Empty;

        foreach (var model in models)
        {
            await AnsiConsole.Status()
                .StartAsync($"Querying [green]{model}[/]", async _ =>
                {
                    List<ChatMessage> messages;
                    if (answer == prompt)
                    {
                        messages = new() { ChatMessage.CreateUserMessage(prompt) };
                    }
                    else
                    {
                        messages = new()
                        {
                            ChatMessage.CreateSystemMessage(
                                $"The previous response was generated by {previousModel}. " +
                                "Please verify the answer, explain your reasoning, " +
                                "and provide an improved response if necessary."),
                            ChatMessage.CreateUserMessage(answer)
                        };
                    }

                    answer = await _client.QueryAsync(model, messages);
                    previousModel = model;
                });
        }

        var path = Path.Combine(Directory.GetCurrentDirectory(), $"answer_{DateTime.Now:yyyyMMddHHmmss}.md");
        await File.WriteAllTextAsync(path, answer);

        var summary = await SummarizeAsync(models.Last(), answer);
        return new(path, summary);
    }

    private async Task<string> SummarizeAsync(string model, string answer)
    {
        string summary = string.Empty;
        await AnsiConsole.Status()
            .StartAsync("Summarizing final answer", async _ =>
            {
                summary = await _client.QueryAsync(model, new ChatMessage[]
                {
                    ChatMessage.CreateSystemMessage("Summarize the following answer in one short paragraph."),
                    ChatMessage.CreateUserMessage(answer)
                });
            });

        return summary.Split('\n').FirstOrDefault() ?? string.Empty;
    }
}

internal sealed record ConsensusResult(string Path, string Summary);
