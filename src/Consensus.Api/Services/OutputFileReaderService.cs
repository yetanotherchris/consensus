namespace Consensus.Api.Services;

/// <summary>
/// Service for reading output files generated by consensus jobs
/// </summary>
public class OutputFileReaderService : IOutputFileReaderService
{
    private readonly string _outputDirectory;
    private readonly ILogger<OutputFileReaderService> _logger;

    public OutputFileReaderService(string outputDirectory, ILogger<OutputFileReaderService> logger)
    {
        _outputDirectory = outputDirectory;
        _logger = logger;
    }

    public async Task<string?> ReadHtmlAsync(string runId)
    {
        var filePath = GetHtmlFilePath(runId);
        
        if (!File.Exists(filePath))
        {
            _logger.LogWarning("HTML file not found for runId: {RunId} at path: {FilePath}", runId, filePath);
            return null;
        }

        try
        {
            _logger.LogInformation("Reading HTML file for runId: {RunId}", runId);
            return await File.ReadAllTextAsync(filePath);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error reading HTML file for runId: {RunId}", runId);
            return null;
        }
    }

    public async Task<string?> ReadMarkdownAsync(string runId)
    {
        var filePath = GetMarkdownFilePath(runId);
        
        if (!File.Exists(filePath))
        {
            _logger.LogWarning("Markdown file not found for runId: {RunId} at path: {FilePath}", runId, filePath);
            return null;
        }

        try
        {
            _logger.LogInformation("Reading markdown file for runId: {RunId}", runId);
            return await File.ReadAllTextAsync(filePath);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error reading markdown file for runId: {RunId}", runId);
            return null;
        }
    }

    public bool HtmlExists(string runId)
    {
        var filePath = GetHtmlFilePath(runId);
        return File.Exists(filePath);
    }

    public bool MarkdownExists(string runId)
    {
        var filePath = GetMarkdownFilePath(runId);
        return File.Exists(filePath);
    }

    private string GetHtmlFilePath(string runId)
    {
        return Path.Combine(_outputDirectory, "responses", $"output-{runId}.html");
    }

    private string GetMarkdownFilePath(string runId)
    {
        return Path.Combine(_outputDirectory, "responses", $"consensus-{runId}.md");
    }
}
